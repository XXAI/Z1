{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport { AuthService } from './auth/auth.service';\nimport { catchError, switchMap, filter, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let TokenInterceptor = /*#__PURE__*/(() => {\n  class TokenInterceptor {\n    constructor(injector) {\n      this.injector = injector;\n    }\n\n    intercept(request, next) {\n      this.authService = this.injector.get(AuthService);\n      const token = this.authService.getToken();\n      request = request.clone({\n        setHeaders: {\n          'Authorization': `Bearer ${token}`,\n          'Content-type': 'application/json'\n        }\n      });\n      return next.handle(request);\n    }\n\n  }\n\n  TokenInterceptor.ɵfac = function TokenInterceptor_Factory(t) {\n    return new (t || TokenInterceptor)(i0.ɵɵinject(i0.Injector));\n  };\n\n  TokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenInterceptor,\n    factory: TokenInterceptor.ɵfac\n  });\n  return TokenInterceptor;\n})();\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(router, injector) {\n      this.router = router;\n      this.injector = injector;\n      this.refreshTokenInProgress = false;\n      this.refreshTokenSubject = new BehaviorSubject(null);\n    }\n\n    intercept(request, next) {\n      this.authService = this.injector.get(AuthService);\n      return next.handle(request).pipe(catchError(response => {\n        if (response instanceof HttpErrorResponse && response.status === 401) {\n          if (response.error.message == \"Unauthenticated.\") {\n            if (this.refreshTokenInProgress) {\n              return this.refreshTokenSubject.pipe(filter(result => result !== null), take(1), switchMap(token => {\n                return next.handle(this.addAuthenticationToken(request));\n              }));\n            } else {\n              this.refreshTokenInProgress = true; // Set the refreshTokenSubject to null so that subsequent API calls will wait until the new token has been retrieved\n\n              this.refreshTokenSubject.next(null); // Call auth.refreshAccessToken(this is an Observable that will be returned)\n\n              return this.authService.refreshToken().pipe(switchMap(token => {\n                this.refreshTokenInProgress = false;\n                this.refreshTokenSubject.next(token);\n                return next.handle(this.addAuthenticationToken(request));\n              }), catchError(response => {\n                this.refreshTokenInProgress = false;\n                this.authService.logout();\n                return throwError(response);\n              }));\n            }\n          } else {\n            this.authService.logout();\n          }\n\n          return throwError(response);\n        }\n\n        return throwError(response);\n      }));\n    }\n\n    addAuthenticationToken(request) {\n      // Get access token from Local Storage\n      const accessToken = this.authService.getToken(); // If access token is null this means that user is not logged in\n      // And we return the original request\n\n      if (!accessToken) {\n        return request;\n      } // We clone the request, because the original request is immutable\n\n\n      return request.clone({\n        setHeaders: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-type': 'application/json'\n        }\n      });\n    }\n\n  }\n\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i0.Injector));\n  };\n\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}