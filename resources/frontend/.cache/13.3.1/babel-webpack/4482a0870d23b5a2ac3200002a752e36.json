{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { User } from './models/user';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.authChange = new Subject();\n    }\n\n    getToken() {\n      return localStorage.getItem('token');\n    }\n\n    getUserData() {\n      //console.log('####################################################################################### GetUserData()');\n      let user = new User();\n      user = JSON.parse(localStorage.getItem('user'));\n      return user;\n    }\n\n    updateUserData(userData) {\n      let user = new User();\n      user = userData;\n      localStorage.setItem('user', JSON.stringify(user));\n      this.authChange.next(true);\n    }\n\n    isAuth() {\n      return !!this.getToken();\n    }\n\n    logIn(username, password) {\n      const url = `${environment.base_url}/signin`;\n      return this.http.post(url, {\n        username,\n        password\n      }).pipe(map(response => {\n        if (response.access_token) {\n          localStorage.setItem('token', response.access_token);\n          let user = JSON.stringify(response.user_data);\n          localStorage.setItem('user', user);\n          let permissions = JSON.stringify(response.permissions);\n          localStorage.setItem('permissions', permissions);\n          this.authChange.next(true);\n        }\n\n        return response;\n      }));\n    }\n\n    refreshToken() {\n      const url = `${environment.base_url}/refresh`;\n      return this.http.post(url, {}).pipe(map(response => {\n        if (response.access_token) {\n          localStorage.setItem('token', response.access_token);\n          this.authChange.next(true);\n        }\n\n        return response;\n      }));\n    }\n\n    signUp(payload) {\n      const url = `${environment.base_url}/signup`;\n      return this.http.post(url, payload).pipe(map(response => {\n        if (response.access_token) {\n          localStorage.setItem('token', response.access_token);\n          let user = JSON.stringify(response);\n          localStorage.setItem('user', user);\n          let permissions = JSON.stringify(response.permissions);\n          localStorage.setItem('permissions', permissions);\n          this.authChange.next(true);\n        }\n\n        return response;\n      }));\n    }\n\n    forgotPassword(email) {\n      const url = `${environment.base_url}/forgot-password`;\n      return this.http.post(url, {\n        email\n      });\n    }\n\n    resetPassword(email, password, token) {\n      const url = `${environment.base_url}/reset-password`;\n      return this.http.post(url, {\n        email,\n        password,\n        token\n      }).pipe(map(response => {\n        if (response.token) {\n          localStorage.setItem('token', response.token);\n          this.authChange.next(true);\n        }\n\n        return response;\n      }));\n    }\n\n    logout() {\n      //this.user = null;\n      localStorage.removeItem('token');\n      localStorage.removeItem('userApps');\n      localStorage.removeItem('permissions');\n      this.authChange.next(false);\n      this.router.navigate(['/login']);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}