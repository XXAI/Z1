{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UsersService = /*#__PURE__*/(() => {\n  class UsersService {\n    constructor(http) {\n      this.http = http;\n      this.url = `${environment.base_url}/user`;\n      this.url_role = `${environment.base_url}/role`;\n      this.url_permission = `${environment.base_url}/permission`;\n      this.url_grupos = `${environment.base_url}/grupos_unidades`;\n      this.url_distritos = `${environment.base_url}/distritos`;\n      this.url_avatars = `${environment.base_url}/avatar-images`;\n    }\n\n    getAvatars() {\n      return this.http.get(this.url_avatars, {}).pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getAllRoles() {\n      return this.http.get(this.url_role, {}).pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getAllPermissions() {\n      return this.http.get(this.url_permission, {}).pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getAllGruposUnidades() {\n      let payload = {\n        'lista-cr': true\n      };\n      return this.http.get(this.url_grupos, {\n        params: payload\n      }).pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getAllDistritos() {\n      let payload = {\n        'lista-distrito': true\n      };\n      return this.http.get(this.url_distritos, {\n        params: payload\n      }).pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getUserList(payload) {\n      return this.http.get(this.url, {\n        params: payload\n      }).pipe(map(response => {\n        return response;\n      }));\n    }\n\n    getUser(id) {\n      return this.http.get(this.url + '/' + id, {}).pipe(map(response => {\n        //this.profile = response.data;\n        //this.profileChange.next({...this.profile});\n        return response.data;\n      }));\n    }\n\n    deleteUser(id) {\n      return this.http.delete(this.url + '/' + id, {}).pipe(map(response => {\n        return response;\n      }));\n    }\n\n    updateUser(payload, id) {\n      return this.http.put(this.url + '/' + id, payload).pipe(map(response => {\n        return response;\n      }));\n    }\n\n    createUser(payload) {\n      return this.http.post(this.url, payload).pipe(map(response => {\n        return response;\n      }));\n    }\n\n  }\n\n  UsersService.ɵfac = function UsersService_Factory(t) {\n    return new (t || UsersService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UsersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsersService,\n    factory: UsersService.ɵfac,\n    providedIn: 'root'\n  });\n  return UsersService;\n})();","map":null,"metadata":{},"sourceType":"module"}